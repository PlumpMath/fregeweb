module fregeweb.Handlers where


data PersistentMap k v = native clojure.lang.IPersistentMap where
  pure native empty clojure.lang.PersistentHashMap.EMPTY :: PersistentMap k v
  pure native assoc :: PersistentMap k v -> k -> v -> PersistentMap k v
  pure native valAt :: PersistentMap k v -> k -> v -> v

  fromKVList :: [(k, v)] -> PersistentMap k v
  fromKVList xs = loop xs newMap where
    newMap = PersistentMap.empty
    loop ((k,v):xs) map = loop xs $ PersistentMap.assoc map k v
    loop [] map = map


type StatusCode = Int
type Uri = String
type ResponseBody = String
type RequestParams = PersistentMap String String
type Headers = PersistentMap String String

data Request = Request {
  uri :: Uri,
  params :: RequestParams
}


data Response = Response {
  body :: ResponseBody,
  headers :: Headers,
  status :: StatusCode
}


make_request :: String -> PersistentMap String String -> Request
make_request uri params = Request uri params


index :: Request -> Response
index req = Response body headers status where
  body = ("Hello " ++ name ++ " from " ++ req.uri)
  name = PersistentMap.valAt req.params "name" "World"
  headers = PersistentMap.fromKVList [("Content-Type", "text/html")]
  status = 200
